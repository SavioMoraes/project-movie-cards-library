{"version":3,"sources":["components/Header.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Rating","rating","this","props","defaultProps","Number","MovieCard","movie","title","subtitle","storyline","imagePath","src","alt","MovieList","movies","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAaeA,G,kKATb,WACE,OACE,4BAAQC,UAAU,qBAChB,wBAAIA,UAAU,cAAd,4B,GAJaC,IAAMC,YCArBC,E,4JACJ,WACE,IAAQC,EAAWC,KAAKC,MAAhBF,OACR,OACE,yBAAKJ,UAAU,qBACb,0BAAMA,UAAU,UAAWI,Q,GALdH,IAAMC,WAe3BC,EAAOI,aAAe,CACpBH,OAAQI,QAGKL,QClBTM,E,4JACJ,WACE,IAAQC,EAAUL,KAAKC,MAAfI,MACAC,EAAkDD,EAAlDC,MAAOC,EAA2CF,EAA3CE,SAAUC,EAAiCH,EAAjCG,UAAWT,EAAsBM,EAAtBN,OAAQU,EAAcJ,EAAdI,UAC5C,OACE,6BAASd,UAAU,cACjB,yBAAKe,IAAMD,EAAYE,IAAML,IAC7B,yBAAKX,UAAU,mBACb,wBAAIA,UAAU,oBAAqBW,GACnC,wBAAIX,UAAU,uBAAwBY,GACtC,uBAAGZ,UAAU,wBAAyBa,IAExC,kBAAC,EAAD,CAAQT,OAASA,S,GAZDH,IAAMC,WAuB9BO,EAAUF,aAAe,CACvBG,MAAO,IAaMD,QCVAQ,E,4JA1Bb,WACE,IAAQC,EAAWb,KAAKC,MAAhBY,OACR,OACE,wBAAIlB,UAAU,cACVkB,EAAOC,KAAI,SAACT,GAAD,OAAW,kBAAC,EAAD,CAAWU,IAAMV,EAAMC,MAAQD,MAAQA,Y,GAL/CT,IAAMC,WCyDfgB,EA3DA,CACb,CACEP,MAAO,kBACPC,SAAU,gCACVC,UAAW,gJACXT,OAAQ,EACRU,UAAW,8BAEb,CACEH,MAAO,iBACPC,SAAU,2BACVC,UAAW,wMACXT,OAAQ,EACRU,UAAW,uCAEb,CACEH,MAAO,mBACPC,SAAU,gBACVC,UAAW,iIACXT,OAAQ,EACRU,UAAW,+BAEb,CACEH,MAAO,cACPC,SAAU,mBACVC,UAAW,iKACXT,OAAQ,IACRU,UAAW,2CAEb,CACEH,MAAO,gBACPC,SAAU,iBACVC,UAAW,4HACXT,OAAQ,IACRU,UAAW,2CAEb,CACEH,MAAO,qBACPC,SAAU,qBACVC,UAAW,qJACXT,OAAQ,EACRU,UAAW,qCAEb,CACEH,MAAO,kBACPC,SAAU,kBACVC,UAAW,2LACXT,OAAQ,IACRU,UAAW,8BAEb,CACEH,MAAO,gBACPC,SAAU,WACVC,UAAW,iKACXT,OAAQ,IACRU,UAAW,sCCxCAO,E,4JAVb,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWkB,OAASA,S,GALVjB,IAAMC,WCMJoB,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.21869e59.chunk.js","sourcesContent":["// Iniciando o projeto üöÄ\nimport React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\">\n        <span className=\"rating\">{ rating }</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = {\n  rating: PropTypes.number,\n};\n\nRating.defaultProps = {\n  rating: Number,\n};\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <section className=\"movie-card\">\n        <img src={ imagePath } alt={ title } />\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{ title }</h4>\n          <h5 className=\"movie-card-subtitle\">{ subtitle }</h5>\n          <p className=\"movie-card-storyline\">{ storyline }</p>\n        </div>\n        <Rating rating={ rating } />\n      </section>\n    );\n  }\n}\n\n/**\n * Consultei o reposit√≥rio do Jhonata Braga e percebi que meu erro estava em n√£o passar as 'classeName' e na cria√ß√£o de uma div para separar os elementos dentro da section!\n * Link: // https://github.com/tryber/sd-011-project-movie-cards-library/pull/112/commits/9cdab6cfaab44e698260bd1cc752df31857dcca6\n */\n\nMovieCard.defaultProps = {\n  movie: {},\n};\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n  }),\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n    return (\n      <ul className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n      </ul>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.shape({\n    map: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieList;\n","/* eslint-disable max-len */\n\nconst movies = [\n  {\n    title: 'Without Remorse',\n    subtitle: 'From the Author of Raibow Six',\n    storyline: 'Kelly must fight without any remorse against his enemies if he wants to avoid disaster and expose the powerful figures behind the conspiracy.',\n    rating: 5,\n    imagePath: 'images/Without_Remorse.jpg',\n  },\n  {\n    title: \"At World's End\",\n    subtitle: 'Pirates of the Caribbean',\n    storyline: 'Captain Barbossa, Will Turner and Elizabeth Swann must sail off the edge of the map, navigate treachery and betrayal, find Jack Sparrow, and make their final alliances for one last decisive battle.',\n    rating: 4,\n    imagePath: 'images/Pirates_of_the_Caribbean.jpg',\n  },\n  {\n    title: 'The Hunger Games',\n    subtitle: 'Hope -The End',\n    storyline: 'Katniss Everdeen e seus aliados lan√ßam um ataque ao Capit√≥lio para tentar libertar Panem e assassinar o presidente Snow.',\n    rating: 5,\n    imagePath: 'images/The_Hunger_Games.jpg',\n  },\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: 'King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire\\'s plans to steal the sacred crystal.',\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: 'A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human\\'s future hope, the legendary city of Olympus.',\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n  },\n];\n\nexport default movies;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MovieList from './components/MovieList';\nimport movies from './data';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <MovieList movies={ movies } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}